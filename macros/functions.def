#---- function styles ----
macros:
    function_style: fortran_style
    scope_return_pattern: ^(exit)
    function_need_declare: 0

subcode: function_open_fortran_style
    my $param_list=$func->{"param_list"}
    my (@plist, @type_list)
    $foreach $p in @$param_list
        $if $p=~/(.+)\s+(\w+)$/
            push @type_list, $1
            push @plist, $2
    my $ret = $func->{ret_type}. " FUNCTION"
    $if !$ret
        $ret = "SUBROUTINE"
    push @$open, "$ret $name(".join(', ', @plist).")"
    push @$pre, "IMPLICIT NONE"
    $foreach $p in @$param_list
        push @$pre, $p

subcode: function_close_fortran_style
    push @$close, "END"
    push @$close, "NEWLINE"

subcode: function_param_fortran_style
    my ($type, $name)
    $if $p=~/(^\S.*)\s+(\S+)\s*$/
        ($type, $name)=($1, $2)
    $else
        $type = get_fortran_type($p)
        $name = $p
    push @$param_list, "$type $name"

subcode: infer_return_fortran_style
    $call warn, "FORTRAN don't use return"
    my $name = $cur_function->{name}
    return "$name = $t"

#----------------------------------------------- 
fncode: get_fortran_type($p)
    my $type
    $if $p=~/^f/i
        $type=$default_float
    $elif $p=~/^d/i
        $type="DOUBLE PRECISION"
    $elif $p=~/^z/i
        $type="COMPLEX*16"
    $elif $p=~/^s/i
        $type="CHARACTER"
    $elif $p=~/^[ijklmn]/i
        $type="INTEGER"
    $else
        $type=$default_float
    return $type

#----------------------------------------------- 
fncode: var_declare($v)
    my $t = "$v->{type} $v->{name}"
    $if $v->{dim}
        $if $v->{type} eq "CHARACTER"
            $t.="*$v->{dim}"
        $else
            $t.="($v->{dim})"
    return $t

fncode: parse_var($name, $type, $value)
    $if !$value && $name=~/(.*?)\s*=\s*(.*)/
        ($name, $value) = ($1, $2)

    $if !$type && $name=~/^\s*(\S.*)\s+(\S+)$/
        ($type, $name)=($1, $2)

    my $var={}
    $if $name=~/(\w+)\((.*)\)/
        $var->{dim}=$2
        $name = $1
    $var->{name}=$name
    $var->{type}=$type
    $var->{init}=$value
    return $var

fncode: get_var_type($name)
    return get_var_type_direct($name)

