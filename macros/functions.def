include: macros_output/functions.def

subcode:: parsecode_func_other
    $case $func =~/^(return_type|return|result|recursive|parameter|lexical)$/
        $if $1 eq "return" or $1 eq "result"
            my $var = parse_var($param)
            $cur_function->{ret_var}= $var
            $cur_function->{return_type}=$var->{type}
        $elif $1 eq "recursive"
            $cur_function->{recursive}=1
        $elif $1 eq "return_type"
            $cur_function->{return_type}=$param
        $elif $1 eq "parameter"
            $call add_function_params, $cur_function
        return
    $case $func =~/^(global|local)$/
        $if $1 eq "global"
            global_add_var($param)
        $else
            local_add_var($param)
        return

#----------------------------------------------- 
macros:
    function_style: fortran

subcode: function_param_fortran
    my $var=parse_var($p)
    my $name = $var->{name}
    $var_hash->{$name}=$var
    push @$param_list, $name

subcode: function_open_fortran
    my $return_type = $func->{return_type}
    my $ret_var = $func->{ret_var}
    my $param_list = $func->{param_list}
    my $param = join(', ', @$param_list)
    $print return_type: $return_type
    $print ret_var: $ret_var
    $if !($return_type or $ret_var)
        $func->{signature}="SUBROUTINE $name"
        push @$open, "SUBROUTINE $name($param)"
    $elif $ret_var
        $(set:r=$ret_var->{$1})
        $func->{signature}="FUNCTION $name"
        my $l="FUNCTION $name($param)"
        $l.= " RESULT($(r:name))"
        $if $func->{recursive}
            $l = "RECURSIVE $l"
        push @$open, $l
        push @$pre, "$(r:type) :: $(r:name)"
    $else
        $func->{signature}="FUNCTION $name"
        push @$open, "$return_type FUNCTION $name($param)"
    my $var_list = $func->{var_list}
    my $var_hash = $func->{var_hash}
    $call dump_vars, $param_list, $var_hash, $pre
    $call dump_vars, $var_list, $var_hash, $pre
    @$var_list=() # so close_scope won't declare them again

subcode: function_close_fortran
    push @$close, "END $func->{signature}"
    push @$close, "NEWLINE"

subcode: infer_return_fortran
# ----------------------------
subcode: declare_var_list(out, hash, @list)
    my %type_list
    $foreach $p in $(list)
        my $type=$(hash)->{$p}->{type}
        my $dim=$(hash)->{$p}->{dim}
        my $name=$p
        $if $dim
            $if $type eq "CHARACTER"
                $name.="*$dim"
            $else
                $name.="($dim)"

        $if !$type_list{$type}
            $type_list{$type}=[]
        push @{$type_list{$type}}, $name


    $foreach %type_list
        push @$(out), "$k ".join(", ", @$v)

