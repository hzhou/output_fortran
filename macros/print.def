fncode: fortran_write($fmt, $vlist)
    $call get_print_to
    $if $fmt
        $if $fmt!~/'/
            push @$out, "WRITE($print_to, '($fmt)') $vlist"
        $else
            $call write_format
    $else
        push @$out, "WRITE($print_to, *) $vlist"

    subcode: get_print_to
        my $print_to = MyDef::compileutil::get_macro_word("print_to", 1)
        $if !$print_to
            $print_to = '*'

    subcode: write_format
        my $label = get_label()
        # push @$out, "Print $label, $vlist"
        push @$out, "WRITE($print_to, $label) $vlist"
        $(if:ext=f90)
            push @$out, "$label Format ($fmt)"
        $(else)
            push @$out, "LABEL $label"
            push @$out, "Format ($fmt)"

#---------------------------------------- 
subcode:: parsecode_func_other
    $case $func eq "print"
        $if $param=~/^'(.*?)',(.*)/
            fortran_write($1, $2)
            return
        $if $param=~/^"(.*?)",(.*)/
            my ($fmt, $vlist)=parse_fmt_2($1, $2)
            fortran_write($fmt, $vlist)
            return
        $elif $param=~/^(.*?);\s*(.*)/
            fortran_write($2, $1)
            return
        $else
            fortran_write(undef, $param)
            return
    $case $func eq "dump"
        my $t = dump_param($param)
        fortran_write(undef, $t)
        return

subcode:: parsecode_func_param_other
    $case $func eq "dump"
        my $t = dump_param($param2)
        fortran_write(undef, "'[$param1] ',".$t)
        return

fncode: dump_param($param)
    my @plist=split /,\s*/, $param
    my @segs
    $if @plist < 10
        push @segs, "'$param: '"
        push @segs, $param
    $else
        $foreach $p in @plist
            push @segs, "' $p='"
            push @segs, $p
    return join(", ", @segs)

fncode: parse_fmt_2($s_fmt, $s_vlist)
    my @fmt_list
    my @segs = split /(%[0-9\.]*[fgd])/, $s_fmt
    $foreach $s in @segs
        $if $s=~/^%(.*)([fgd])/
            my ($w, $f)=($1, $2)
            $if !$w
                $w = 6
            $if $f eq "f"
                push @fmt_list, "F$w"
            $elif $f eq "g"
                push @fmt_list, "E$w"
            $elif $f eq "d"
                push @fmt_list, "I$w"
        $else
            push @fmt_list, "'$s'"
    return (join(",", @fmt_list), $s_vlist)
