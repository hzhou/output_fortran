include: output.def
include: macros_output/case.def
include: macros_output/for.def
include: macros_output/functions.def
include: macros_output/scope.def
include: macros_output/variables.def
include: macros_output/types.def
# include: macros/f77.def
include: macros/dumpout.def
include: macros/functions.def
include: macros/variables.def
include: macros/print.def

page: output_fortran, output_main
    output_dir: lib/MyDef
    ext: f
    package: MyDef::output_fortran
    autolist: 1


subcode: init_page
    $global $label_index
    $label_index=0
    $call @update_default_type
    $call function_init
    $call autolist_functions, add

fncode: get_label
    $label_index++
    return sprintf("%d", $label_index*10)

subcode: parsecode
    $call parsecode_case_support, IF, ELSEIF, fortran_style
    $call parsecode_common

#---------------------------------------- 
subcode:: parsecode_special
    $case $l=~/^NOOP POST_MAIN/
        push @$out, "END"
        push @$out, "NEWLINE"
        # $call autolist_functions, add
        $call function_list_all
        # $call @parsecode_post
        return

subcode: parsecode_func
    $if $func eq "uselib"
        $global %objects
        my @tlist = split /,\s*/, $param
        $foreach $f in @tlist
            $if $f=~/^\w+$/
                $objects{"lib$f"}=1
            $else
                $objects{$f}=1
        return
    $elif $func eq "getlabel"
        my $s = get_label()
        $if !$param
            $param="label"
        $call set_macro, $param, $s
        return
    $elif $func eq "while"
        $if !$param or $param eq "1"
            return single_block("DO", "END DO")
        $else
            return single_block("DO WHILE ($param)", "END DO")
    $elif $func eq "for"
        $if $param =~/(\w+)\s*=\s*(.*)/ -> $v, $t
            func_add_var($v, "INTEGER")
            $if $t=~/^\s*0\b/
                $call warn, for loop start at 0? (FORTRAN often start at 1)
            $if $t=~/^\d+$/
                $t="1, $t"
            $else
                $t =~ s/:/, /g
            $param = "$v = $t"
        return single_block("DO $param", "END DO")
    $call @parsecode_func_other

subcode: parsecode_func_param
    NOOP

#---------------------------------------- 
subcode: case_fortran_style
    $(if:0)
        $global %op=("=="=>"EQ","<="=>"LE",">="=>"GE","<"=>"LT",">"=>"GT","/="=>"NE","!="=>"NE")
        $cond=~s/([\/!<>]=|[<>])/.$op{$1}./g
    push @src, "$case ($cond) THEN"
    $call push_indented_block
    $if $case eq "IF"
        $if !$case_wrap
            $case_wrap=[]
        push @$case_wrap, "ENDIF"

subcode: else_fortran_style
    push @src, "ELSE"
    $call push_indented_block

